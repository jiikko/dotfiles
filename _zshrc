export DISABLE_SPRING=1
export EDITOR="/usr/local/bin/vim"
export LANG=ja_JP.UTF-8
export LC_CTYPE=ja_JP.UTF-8
export PATH=$HOME/.nodebrew/current/bin:$PATH
if type nodenv > /dev/null 2>&1; then
  export PATH="$HOME/.nodenv/bin:$PATH"
  eval "$(nodenv init -)"
else
  :
fi

export GOPATH=$HOME/go
if type go > /dev/null 2>&1; then
  export GOROOT=$( go env GOROOT )
fi
export PATH=$GOPATH/bin:$PATH
export HUSKY_SKIP_HOOKS=1

export IOS_UA='iOS 10.3.2  Mozilla/5.0 (iPhone; CPU iPhone OS 10_3_2 like Mac OS X) AppleWebKit/603.2.4 (KHTML, like Gecko) Version/10.0 Mobile/14F89 Safari/602.1'
export REDIS_ENDPOINT=redis://localhost:6379/
# for rubyコンパイル
#export CFLAGS='-Wno-error=shorten-64-to-32'

## <エスケープシーケンス>
## prompt_bang が有効な場合、!=現在の履歴イベント番号, !!='!' (リテラル)
# ${WINDOW:+"[$WINDOW]"} = screen 実行時にスクリーン番号を表示 (prompt_subst が必要)
# %/ or %d = ディレクトリ (0=全て, -1=前方からの数)
# %~ = ディレクトリ
# %h or %! = 現在の履歴イベント番号
# %L = 現在の $SHLVL の値
# %M = マシンのフルホスト名
# %m = ホスト名の最初の `.' までの部分
# %S (%s) = 突出モードの開始 (終了)
# %U (%u) = 下線モードの開始 (終了)
# %B (%b) = 太字モードの開始 (終了)
# %t or %@ = 12 時間制, am/pm 形式での現在時刻
# %n or $USERNAME = ユーザー ($USERNAME は環境変数なので setopt prompt_subst が必要)
# %N = シェル名
# %i = %N によって与えられるスクリプト, ソース, シェル関数で, 現在実行されている行の番号 (debug用)
# %T = 24 時間制での現在時刻
# %* = 24 時間制での現在時刻, 秒付き
# %w = `曜日-日' の形式での日付
# %W = `月/日/年' の形式での日付
# %D = `年-月-日' の形式での日付
# %D{string} = strftime 関数を用いて整形された文字列 (man 3 strftime でフォーマット指定が分かる)
# %l = ユーザがログインしている端末から, /dev/ プレフィックスを取り除いたもの
# %y = ユーザがログインしている端末から, /dev/ プレフィックスを取り除いたもの (/dev/tty* はソノママ)
# %? = プロンプトの直前に実行されたコマンドのリターンコード
# %_ = パーサの状態
# %E = 行末までクリア
# %# = 特権付きでシェルが実行されているならば `#', そうでないならば `%' == %(!.#.%%)
# %v = psvar 配列パラメータの最初の要素の値
# %{...%} = リテラルのエスケープシーケンスとして文字列をインクルード
# %(x.true-text.false-text) = 三つ組の式
# %<,>string>, %[xstring] = プロンプトの残りの部分に対する, 切り詰めの振る舞い
#         `<' の形式は文字列の左側を切り詰め, `>' の形式は文字列の右側を切り詰めます
# %c, %., %C = $PWD の後ろ側の構成要素

# .zshrc をコンパイルして .zshrc.zwc を生成するコマンド
zcompile ~/.zshrc

# コマンドラインスタック（入力中コマンドをスタックに退避させる）
# ESC-q

# コマンド入力中にヘルプ（man）を見る
# ESC-h

##========================================================##
##================== キーバインドの設定 ==================##
##========================================================##
bindkey -e      # emacs キーバインド
# bindkey -v      # vi キーバインド
# set -o vi

##========================================================##
##================= リストの色つけの設定 =================##
##========================================================##
# ls, #dir, vdir の設定
alias s='screen -U'
alias sk='kill -9 $$'
#alias ll='ls -l'
alias ls='ls --G'
alias grep='grep --color=auto'
alias tn='terminal-notifier -sound default'
export MAILCHECK=0
export LS_COLORS='di=34:ln=35:so=32:pi=33:ex=31:bd=46;34:cd=43;34:su=41;30:sg=46;30:tw=42;30:ow=43;30'
# 補完候補にも色付き表示
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
# kill の候補にも色付き表示
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([%0-9]#)*=0=01;31'

##========================================================##
##====================== 補完の設定 ======================##
##========================================================##
autoload -U compinit ; compinit
# 補完候補の大文字小文字の違いを無視
#zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'
zstyle ':completion:*:default' menu select=1 # 補完候補を←↓↑→で選択
zstyle ':completion:*' use-cache true        # 補完キャッシュ
# kill で 'ps x' のリストから選択可能
zstyle ':completion:*:processes' command 'ps x'

setopt list_packed           # コンパクトに補完リストを表示
#setopt auto_remove_slash     # 補完で末尾に補われた / を自動的に削除
unsetopt auto_remove_slash
setopt auto_param_slash      # ディレクトリ名の補完で末尾の / を自動的に付加し、次の補完に備える
setopt mark_dirs             # ファイル名の展開でディレクトリにマッチした場合 末尾に / を付加
setopt list_types            # 補完候補一覧でファイルの種別を識別マーク表示 (訳注:ls -F の記号)
unsetopt menu_complete       # 補完の際に、可能なリストを表示してビープを鳴らすのではなく、
                        # 最初にマッチしたものをいきなり挿入、はしない
setopt auto_list             # ^Iで補完可能な一覧を表示する(補完候補が複数ある時に、一覧表示)
setopt auto_menu             # 補完キー連打で順に補完候補を自動で補完
setopt auto_param_keys       # カッコの対応などを自動的に補完
setopt auto_resume           # サスペンド中のプロセスと同じコマンド名を実行した場合はリジューム

#setopt auto_correct          # 補完時にスペルチェック
#setopt correct               # スペルミスを補完
#setopt correct_all           # コマンドライン全てのスペルチェックをする

##========================================================##
##==================== 予測補完の設定 ====================##
##========================================================##
autoload -U predict-on       # 履歴による予測入力 (man zshcontrib)
zle -N predict-on
zle -N predict-off
bindkey '^xp'  predict-on    # Cttl+x p で予測オン
bindkey '^x^p' predict-off   # Cttl+x Ctrl+p で予測オフ

##========================================================##
##====================== 履歴の設定 ======================##
##========================================================##
HISTFILE=$HOME/.zsh_history  # 履歴をファイルに保存する
HISTSIZE=10000              # メモリ内の履歴の数
SAVEHIST=10000              # 保存される履歴の数
setopt extended_history      # 履歴ファイルに開始時刻と経過時間を記録
#unsetopt extended_history
setopt append_history        # 履歴を追加 (毎回 .zhistory を作るのではなく)
setopt inc_append_history    # 履歴をインクリメンタルに追加
setopt share_history         # 履歴の共有
setopt hist_ignore_all_dups  # 重複するコマンド行は古い方を削除
setopt hist_ignore_dups      # 直前と同じコマンドラインはヒストリに追加しない
setopt hist_ignore_space     # スペースで始まるコマンド行はヒストリリストから削除
                        # (→ 先頭にスペースを入れておけば、ヒストリに保存されない)
unsetopt hist_verify         # ヒストリを呼び出してから実行する間に一旦編集可能を止める
setopt hist_reduce_blanks    # 余分な空白は詰めて記録
setopt hist_save_no_dups     # ヒストリファイルに書き出すときに、古いコマンドと同じものは無視する。
setopt hist_no_store         # historyコマンドは履歴に登録しない
setopt hist_expand           # 補完時にヒストリを自動的に展開

# 全履歴の一覧を出力する
function history-all { history -E 1 }

##========================================================##
##=================== プロンプトの設定 ===================##
##========================================================##
autoload -U promptinit ; promptinit
autoload -U colors     ; colors
# プロンプトテーマを表示するコマンド
# prompt -l
# 基本のプロンプト
PROMPT="%{$reset_color%}$ "
# [場所] プロンプト
PROMPT="%{$reset_color%}[%{$fg[red]%}%B%/%b%{$reset_color%}]$PROMPT"
# 名前@マシン名 プロンプト
PROMPT="%{$reset_color%}%{$fg[green]%}$USER%{$reset_color%}@%{$fg[cyan]%}%m%{$reset_color%}$PROMPT"
RPROMPT="%{$fg[green]%}[%*]%{$reset_color%}"




##========================================================##
##================ ディレクトリ移動の設定 ================##
##========================================================##
setopt auto_cd               # ディレクトリのみで移動
setopt auto_pushd            # 普通に cd するときにもディレクトリスタックにそのディレクトリを入れる
setopt pushd_ignore_dups     # ディレクトリスタックに重複する物は古い方を削除
setopt pushd_to_home         # pushd 引数ナシ == pushd $HOME
setopt pushd_silent          # pushd,popdの度にディレクトリスタックの中身を表示しない
# pop command
alias pd='popd'
alias gd='dirs -v; echo -n "select number: ";
read newdir; cd +"$newdir" '

##========================================================##
##====================== 雑多な設定 ======================##
##========================================================##
#setopt AUTOLOGOUT=n          # n分後に自動的にログアウト
setopt no_beep               # コマンド入力エラーでBeepを鳴らさない
#setopt beep

setopt complete_in_word
setopt extended_glob         # 拡張グロブを有効にする
setopt brace_ccl             # ブレース展開機能を有効にする
setopt equals                # =COMMAND を COMMAND のパス名に展開
setopt numeric_glob_sort     # 数字を数値と解釈してソートする
setopt path_dirs             # コマンド名に / が含まれているとき PATH 中のサブディレクトリを探す
setopt print_eight_bit       # 補完候補リストの日本語を適正表示
setopt auto_name_dirs

unsetopt flow_control        # (shell editor 内で) C-s, C-q を無効にする
setopt no_flow_control       # C-s/C-q によるフロー制御を使わない
setopt hash_cmds             # 各コマンドが実行されるときにパスをハッシュに入れる

#setopt ignore_eof            # C-dでログアウトしない

setopt bsd_echo
setopt no_hup                # ログアウト時にバックグラウンドジョブをkillしない
#setopt no_checkjobs          # ログアウト時にバックグラウンドジョブを確認しない
setopt notify                # バックグラウンドジョブが終了したら(プロンプトの表示を待たずに)すぐに知らせる
setopt long_list_jobs        # 内部コマンド jobs の出力をデフォルトで jobs -L にする

setopt magic_equal_subst     # コマンドラインの引数で --PREFIX=/USR などの = 以降でも補完できる
#setopt mail_warning
setopt multios               # 複数のリダイレクトやパイプなど、必要に応じて TEE や CAT の機能が使われる
setopt short_loops           # FOR, REPEAT, SELECT, IF, FUNCTION などで簡略文法が使えるようになる
#setopt sun_keyboard_hack     # SUNキーボードでの頻出 typo ` をカバーする
setopt always_last_prompt    # カーソル位置は保持したままファイル名一覧を順次その場で表示
setopt cdable_vars sh_word_split

setopt rm_star_wait          # rm * を実行する前に確認
#setopt rm_star_silent        # rm * を実行する前に確認しない
#setopt no_clobber            # リダイレクトで上書きを禁止
unsetopt no_clobber

# setopt no_unset              # 未定義変数の使用禁止

#setopt interactive_comments  # コマンド入力中のコメントを認める
#setopt chase_links           # シンボリックリンクはリンク先のパスに変換してから実行
#setopt print_exit_value      # 戻り値が 0 以外の場合終了コードを表示
#setopt single_line_zle       # デフォルトの複数行コマンドライン編集ではなく、１行編集モードになる
#setopt xtrace                # コマンドラインがどのように展開され実行されたかを表示する

# less の動作（man less 参照）
LESS=-M
export LESS
if type /usr/bin/lesspipe &>/dev/null
then
LESSOPEN="| /usr/bin/lesspipe '%s'"
LESSCLOSE="/usr/bin/lesspipe '%s' '%s'"
export LESSOPEN LESSCLOSE
fi

umask 022 # ファイルを作るとき、どんな属性で作るか（man umask 参照）
ulimit -s unlimited  # stack size 制限解除
limit coredumpsize 0 # core 抑制
# Grip などGlibアプリケーション出力での文字化け防止
export G_FILENAME_ENCODING=@locale

# タイトルバーの動的変更
precmd() {
[[ -t 1 ]] || return
case $TERM in
sun-cmd) print -Pn "\e]l[%~]\e\\"
 ;;
*xterm*|rxvt|(dt|k|E)term) print -Pn "\e]2;[%~]\a"
 ;;
esac
}

# google 検索
function google() {
local str
if [ $# != 0 ]; then # 引数が存在すれば
for i in $*; do
 str="$str+$i"
done
str=`echo $str | sed 's/^\+//'` #先頭の「+」を削除
fi
open "http://www.google.co.jp/search?hl=ja&q=$str"
}
# wikipedia 検索
function wikipedia() { open "http://ja.wikipedia.crg/wiki/$1" }

# テキスト検索
find-grep () { find . -type f -print | xargs grep -n --binary-files=without-match $@ }


# Global alias
alias mg=':'
alias al='alias'
alias be="bundle exec"
alias b="bundle exec"

alias va='vagrant'
alias bu='bundle install'

alias ls='ls -G'
if [ `uname` = "Linux" ]; then
  alias ls='ls --color'
fi

alias ll='ls -l'
alias cl='clear'
alias less='less -R'

alias ks='ls'

alias gg='git grep -n'
alias gst='git status'
alias gd='git diff'
alias gl='git log'
alias gb='git branch'
alias gch='git checkout'
alias g='git'
alias gv='git --version'
alias gp='git push'
alias gad='git add \.'
alias gc='git commit \-m'
alias gm='git pull origin master'

alias gf='git-flow'
alias ggl='git log --graph --pretty=oneline --abbrev-commit --decorate --all'


alias rr='rake routes'

alias sb='source ~/.bashrc'
alias sz='source ~/.zshrc'

alias v='vim'
alias i='vim'
alias iv='vim'
alias vi='vim'
alias bi='vim'
alias vo='vim'
alias ci='vim'
alias c='vim'
alias vb='vim ~/.bashrc'
alias vz='vim ~/.zshrc'
alias vbpro='vim ~/.bash_profile'
alias vv='vim ~/.vimrc'
alias ign='vim .gitignore'


alias -g L='| less'
alias -g H='| head'
alias -g T='| tail'
alias -g G='| grep'
alias -g S='| sed'
alias -g A='| awk'
alias -g W='| wc'

alias ssh='ssh -o ServerAliveInterval=60'

# alias
alias e='vim'
alias h='history'
alias ha='history-all'
alias screen='TERM=xterm screen'

alias tac='tail -r'


# HTMLファイルに張り付け用の、タブ、空白、< > の変換コマンド
alias htmlconv='sed -e "s/</\&lt;/g;s/>/\&gt;/g;s/\t/\&nbsp;\&nbsp;\&nbsp;\&nbsp;/g;s/\s/\&nbsp;/g" '



bindkey "^R" history-incremental-search-backward
bindkey "^S" history-incremental-search-forward

# bindkey "^E" end-of-line
# bindkey "^A" beginning-of-line
# bindkey "^H" backward-delete-char

#Mac用
export PATH=/opt/local/bin:/opt/local/sbin:$PATH
# Finished adapting your PATH environment variable for use with MacPorts.

# mysql5rvm
# export PATH=/opt/local/lib/mysql5/bin:$PATH

# http://webdev.jp.net/mac-osx-mysql-install-start/
# export PATH=$PATH:/opt/local/lib/mysql5/bin

# echo 'export PATH="/usr/local/opt/mysql@5.7/bin:$PATH"' >> ~/.zshrc

# gitx
export PATH=/Applications/GitX.app/Contents/MacOS:$PATH
alias gitx='GitX .'

# gitk
# http://stackoverflow.com/questions/11785126/cfurlcopyresourcepropertyforkey-failed-because-it-was-passed-this-url-which-has
alias gitk='gitk 2>/dev/null'

export MANPATH=/opt/local/man:$MANPATH

export PATH=/opt/local/lib/postgresql92/bin:$PATH


if [ -f /opt/local/etc/profile.d/bash_completion.sh ]; then
  . /opt/local/etc/profile.d/bash_completion.sh
fi

# http://architects.dzone.com/articles/bash-gitps1-command-not-found
if [ -f /opt/local/share/doc/git-core/contrib/completion/git-prompt.sh ]; then
  . /opt/local/share/doc/git-core/contrib/completion/git-prompt.sh
fi





# http://qiita.com/items/8d5a627d773758dd8078
# vcs_info 設定

RPROMPT=""

autoload -Uz vcs_info
autoload -Uz add-zsh-hook
autoload -Uz is-at-least
autoload -Uz colors

# 以下の3つのメッセージをエクスポートする
#   $vcs_info_msg_0_ : 通常メッセージ用 (緑)
#   $vcs_info_msg_1_ : 警告メッセージ用 (黄色)
#   $vcs_info_msg_2_ : エラーメッセージ用 (赤)
zstyle ':vcs_info:*' max-exports 3

zstyle ':vcs_info:*' enable git svn hg bzr
# 標準のフォーマット(git 以外で使用)
# misc(%m) は通常は空文字列に置き換えられる
zstyle ':vcs_info:*' formats '(%s)-[%b]'
zstyle ':vcs_info:*' actionformats '(%s)-[%b]' '%m' '<!%a>'
zstyle ':vcs_info:(svn|bzr):*' branchformat '%b:r%r'
zstyle ':vcs_info:bzr:*' use-simple true

# source libs
# -------------------------
# zaw
# -------------------------
# http://qiita.com/termoshtt/items/68a5372a43543037667f
DOTFILE_FULLPATH=`ls -al ~/.zshrc | awk '{print $11}' |  sed -e "s|/_zshrc||"`
source "${DOTFILE_FULLPATH}/lib/zsh/zaw/zaw.zsh"

autoload -Uz chpwd_recent_dirs cdr add-zsh-hook
add-zsh-hook chpwd chpwd_recent_dirs
zstyle ':chpwd:*' recent-dirs-max 500 # cdrの履歴を保存する個数
zstyle ':chpwd:*' recent-dirs-default yes
zstyle ':completion:*' recent-dirs-insert both

zstyle ':filter-select:highlight' selected fg=black,bg=white,standout
zstyle ':filter-select' case-insensitive yes

bindkey '^@' zaw-cdr
bindkey '^R' zaw-history
bindkey '^X^F' zaw-git-files
bindkey '^X^B' zaw-git-branches
bindkey '^X^P' zaw-process
bindkey '^X^S' zaw-screens

# http://qiita.com/yuku_t/items/e58cbecf13407446bd50
function _git_status() {
  if [ "$(git rev-parse --is-inside-work-tree 2> /dev/null)" = 'true' ]; then
    echo git statusb # git statusを実行したっぽくみせかける
    git status
  fi
  zle reset-prompt
}

function _git_commit() {
  if [ "$(git rev-parse --is-inside-work-tree 2> /dev/null)" = 'true' ]; then
    git commit
  fi
  zle reset-prompt
}

function _git_diff() {
  if [ "$(git rev-parse --is-inside-work-tree 2> /dev/null)" = 'true' ]; then
    git diff
  fi
  zle reset-prompt
}

function _shell_ls() {
  echo ls
  ls
  zle reset-prompt
}

zle -N git_status _git_status  # _git_status関数をgit_status widgetとして登録
zle -N git_diff _git_diff
zle -N git_commit _git_commit
zle -N shell_ls _shell_ls
bindkey '^G^S' git_status
bindkey '^G^M' git_commit
# bindkey '^G^\D' git_diff
bindkey '^G^G' git_diff
bindkey '^L^S' shell_ls

if is-at-least 4.3.10; then
    # git 用のフォーマット
    # git のときはステージしているかどうかを表示
    zstyle ':vcs_info:git:*' formats '(%s)-[%b]' '%c%u %m'
    zstyle ':vcs_info:git:*' actionformats '(%s)-[%b]' '%c%u %m' '<!%a>'
    zstyle ':vcs_info:git:*' check-for-changes true
    zstyle ':vcs_info:git:*' stagedstr "+"    # %c で表示する文字列
    zstyle ':vcs_info:git:*' unstagedstr "-"  # %u で表示する文字列
fi

# hooks 設定
if is-at-least 4.3.11; then
    # git のときはフック関数を設定する

    # formats '(%s)-[%b]' '%c%u %m' , actionformats '(%s)-[%b]' '%c%u %m' '<!%a>'
    # のメッセージを設定する直前のフック関数
    # 今回の設定の場合はformat の時は2つ, actionformats の時は3つメッセージがあるので
    # 各関数が最大3回呼び出される。
    zstyle ':vcs_info:git+set-message:*' hooks \
                                            git-hook-begin \
                                            git-untracked \
                                            git-push-status \
                                            git-nomerge-branch \
                                            git-stash-count

    # フックの最初の関数
    # git の作業コピーのあるディレクトリのみフック関数を呼び出すようにする
    # (.git ディレクトリ内にいるときは呼び出さない)
    # .git ディレクトリ内では git status --porcelain などがエラーになるため
    function +vi-git-hook-begin() {
        if [[ $(command git rev-parse --is-inside-work-tree 2> /dev/null) != 'true' ]]; then
            # 0以外を返すとそれ以降のフック関数は呼び出されない
            return 1
        fi

        return 0
    }

    # untracked フィアル表示
    #
    # untracked ファイル(バージョン管理されていないファイル)がある場合は
    # unstaged (%u) に ? を表示
    function +vi-git-untracked() {
        # zstyle formats, actionformats の2番目のメッセージのみ対象にする
        if [[ "$1" != "1" ]]; then
            return 0
        fi

        if command git status --porcelain 2> /dev/null \
            | awk '{print $1}' \
            | command grep -F '??' > /dev/null 2>&1 ; then

            # unstaged (%u) に追加
            hook_com[unstaged]+='?'
        fi
    }

    # push していないコミットの件数表示
    #
    # リモートリポジトリに push していないコミットの件数を
    # pN という形式で misc (%m) に表示する
    function +vi-git-push-status() {
        # zstyle formats, actionformats の2番目のメッセージのみ対象にする
        if [[ "$1" != "1" ]]; then
            return 0
        fi

        if [[ "${hook_com[branch]}" != "master" ]]; then
            # master ブランチでない場合は何もしない
            return 0
        fi

        # push していないコミット数を取得する
        local ahead
        ahead=$(command git rev-list origin/master..master 2>/dev/null \
            | wc -l \
            | tr -d ' ')

        if [[ "$ahead" -gt 0 ]]; then
            # misc (%m) に追加
            hook_com[misc]+="(p${ahead})"
        fi
    }

    # マージしていない件数表示
    #
    # master 以外のブランチにいる場合に、
    # 現在のブランチ上でまだ master にマージしていないコミットの件数を
    # (mN) という形式で misc (%m) に表示
    function +vi-git-nomerge-branch() {
        # zstyle formats, actionformats の2番目のメッセージのみ対象にする
        if [[ "$1" != "1" ]]; then
            return 0
        fi

        if [[ "${hook_com[branch]}" == "master" ]]; then
            # master ブランチの場合は何もしない
            return 0
        fi

        local nomerged
        nomerged=$(command git rev-list master..${hook_com[branch]} 2>/dev/null | wc -l | tr -d ' ')

        if [[ "$nomerged" -gt 0 ]] ; then
            # misc (%m) に追加
            hook_com[misc]+="(m${nomerged})"
        fi
    }


    # stash 件数表示
    #
    # stash している場合は :SN という形式で misc (%m) に表示
    function +vi-git-stash-count() {
        # zstyle formats, actionformats の2番目のメッセージのみ対象にする
        if [[ "$1" != "1" ]]; then
            return 0
        fi

        local stash
        stash=$(command git stash list 2>/dev/null | wc -l | tr -d ' ')
        if [[ "${stash}" -gt 0 ]]; then
            # misc (%m) に追加
            hook_com[misc]+=":S${stash}"
        fi
    }

fi

function _update_vcs_info_msg() {
    local -a messages
    local prompt

    LANG=en_US.UTF-8 vcs_info

    if [[ -z ${vcs_info_msg_0_} ]]; then
        # vcs_info で何も取得していない場合はプロンプトを表示しない
        prompt=""
    else
        # vcs_info で情報を取得した場合
        # $vcs_info_msg_0_ , $vcs_info_msg_1_ , $vcs_info_msg_2_ を
        # それぞれ緑、黄色、赤で表示する
        [[ -n "$vcs_info_msg_0_" ]] && messages+=( "%F{green}${vcs_info_msg_0_}%f" )
        [[ -n "$vcs_info_msg_1_" ]] && messages+=( "%F{yellow}${vcs_info_msg_1_}%f" )
        [[ -n "$vcs_info_msg_2_" ]] && messages+=( "%F{red}${vcs_info_msg_2_}%f" )

        # 間にスペースを入れて連結する
        prompt="${(j: :)messages}"
    fi

    RPROMPT="$prompt"
}
add-zsh-hook precmd _update_vcs_info_msg

# screen のセッション名にカレントディレクトリ名にしてくれる
# http://hitode909.hatenablog.com/entry/20090731/1249051564
ss () {
  if [ -n "$1" ]; then
    name="$1"
  else
    name=`basename "$PWD"`
  fi
  screen -x $name || screen -r $name || screen -S $name
}

# git current branch
gcb () {
  # or git rev-parse --abbrev-ref HEAD
  git branch | awk '/\*/ { print $2; }'
}

puma_ps () {
  ROOT_SCREEN_PID=$(ps x | grep -E "S $(echo `basename "$PWD"`)$" | awk '{ print $1}')
  if [[ $ROOT_SCREEN_PID == '' ]]; then
    echo 'カレントディレクトリ名のscreenセッションが見つかりませんでした'
    exit 1
  else
    pstree -p $ROOT_SCREEN_PID | grep puma
  fi
}

#!/bin/sh
# github.comでHEADコミットのURLを表示する関数です
# Usage: open $(bin/head_commit_id_url)
# => open browser!!
commit_id_url() {
  HOST_AND_PATH=$(git remote -v | grep origin | head -n 1 | tr ':' '/' | sed -e 's|.*@\(github.com/[^.]*\)\..*$|\1|')
  HEAD_COMMMIT_ID=$(git rev-parse HEAD)
  echo https://${HOST_AND_PATH}/commit/${HEAD_COMMMIT_ID}
}

git_file_url() {
  HOST_AND_PATH=$(git remote -v | grep origin | head -n 1 | tr ':' '/' | sed -e 's|.*@\(github.com/[^.]*\)\..*$|\1|')
  HEAD_COMMMIT_ID=$(git rev-parse HEAD)
  echo https://${HOST_AND_PATH}/blob/$HEAD_COMMMIT_ID/$1
}

# for vim-session
init_vimenv() {
  mkdir -p '.vimsessions'
}

make_ruby_version_file() {
  RUBY_VERSION=$1
  if [[ "$RUBY_VERSION" ]]; then
    echo "$RUBY_VERSION" > .ruby-version
  else
    echo 2.5.3 > .ruby-version
  fi
}

init_database_yml() {
  DATABACE_URL=$(cat<<EOH
development:
  adapter: mysql2
  database: tekuaka_production
  username: root
  password:
  socket: "/tmp/mysql.sock"
EOH
)
  echo "$DATABACE_URL" > config/database.yml
}

make_gtags() {
  if type gtags > /dev/null 2>&1; then
    gtags -v
    gtags --gtagslabel=pygments -v
  else
    echo "not found gtags command!! run `brew install global`"
  fi
}
alias mt='make_gtags'

make_readme_md() {
  DIR_NAME=$(echo "$(basename $(pwd))")
  H1=$(echo $DIR_NAME | ruby -e 'puts(gets.tap { |x| x[0] = x[0].upcase! })')
  echo "# $H1" >> README.md
}

whichppr() {
  COMMIT_ID=$1
  if [[ $COMMIT_ID = '' ]]; then
    echo require commit id
    exit 1
  fi

  (git show $COMMIT_ID > /dev/null 2>&1 )
  if [[ $? != 0 ]]; then
    echo not found commit id
    exit 1
  fi
  PULL_REQUEST_ID=$(git log --merges --oneline --reverse --ancestry-path $COMMIT_ID...master | head -n1 | grep -o -E ' #[^ ]*' | grep -o -E '[0-9]*$')
  if [[ $PULL_REQUEST_ID = '' ]]; then
    echo not found PULL_REQUEST_ID
    exit 1
  fi
  REPO_NAME=$(git remote -v | grep origin | head -n1 | grep -o ':[^.]*' | grep -o '[^:]*$')
  BASE=https://github.com
  open $(open $BASE/$REPO_NAME/pull/$PULL_REQUEST_ID)
}

export SCREENDIR="`echo ~`/.screens"

if type rbenv > /dev/null 2>&1; then
  export PATH="$HOME/.rbenv/bin:$PATH"
  eval "$(rbenv init -)"
else
  :
fi

if type anyenv > /dev/null 2>&1; then
  # anyenv install --init
  eval "$(anyenv init -)"
else
  :
fi

export PYENV_ROOT=${HOME}/.pyenv
if [ -d "${PYENV_ROOT}" ]; then
    export PATH=${PYENV_ROOT}/bin:$PATH
    eval "$(pyenv init -)"
    eval "$(pyenv virtualenv-init -)"
fi

ssh-add ~/.ssh/id_rsa

if type direnv > /dev/null 2>&1; then
  eval "$(direnv hook zsh)"
fi

if type pyenv > /dev/null 2>&1; then
  eval "$(pyenv init --path)"
  eval "$(pyenv init -)"
fi

export NVM_DIR="$HOME/.nvm"
[ -s "/usr/local/opt/nvm/nvm.sh" ] && . "/usr/local/opt/nvm/nvm.sh"  # This loads nvm
[ -s "/usr/local/opt/nvm/etc/bash_completion.d/nvm" ] && . "/usr/local/opt/nvm/etc/bash_completion.d/nvm"
export PATH="/usr/local/opt/mysql@5.7/bin:$PATH"
export PATH="/opt/homebrew/opt/mysql@5.7/bin:$PATH"
export PATH="/opt/homebrew/bin:$PATH"
