export DISABLE_SPRING=1
export EDITOR="/opt/homebrew/bin/nvim"
export LANG=ja_JP.UTF-8
export LC_CTYPE=ja_JP.UTF-8

export PATH="$HOME/.rbenv/bin:$PATH"
if type rbenv > /dev/null 2>&1; then
  eval "$(rbenv init -)"
else
  :
fi

export PATH=$HOME/.nodebrew/current/bin:$PATH
if type nodenv > /dev/null 2>&1; then
  export PATH="$HOME/.nodenv/bin:$PATH"
  eval "$(nodenv init -)"
else
  :
fi

if type anyenv > /dev/null 2>&1; then
  # anyenv install --init
  eval "$(anyenv init -)"
else
  :
fi

if type pyenv > /dev/null 2>&1; then
  eval "$(pyenv init -)"
  eval "$(pyenv init --path)"
fi

if type direnv > /dev/null 2>&1; then
  eval "$(direnv hook zsh)"
fi

export GOPATH=$HOME/go
if type go > /dev/null 2>&1; then
  export GOROOT=$( go env GOROOT )
fi
export PATH=$GOPATH/bin:$PATH
export PATH="/Users/koji/dotfiles/bin:$PATH"
export PATH="/opt/homebrew/bin:$PATH"

export HUSKY_SKIP_HOOKS=1
export FZF_DEFAULT_OPTS='--height 80% --reverse --border'
export SCREENDIR="`echo ~`/.screens"


if [ ~/.zshrc -nt ~/.zshrc.zwc ]; then
   zcompile ~/.zshrc
fi

##========================================================##
##================== キーバインドの設定 ==================##
##========================================================##
bindkey -e      # emacs キーバインド
# bindkey -v      # vi キーバインド
# set -o vi

##========================================================##
##================= リストの色つけの設定 =================##
##========================================================##
# ls, #dir, vdir の設定
alias s='screen -U'
alias sk='kill -9 $$'
alias ls='ls --G'
alias grep='grep --color=auto'
alias tn='terminal-notifier -sound default'
export MAILCHECK=0
export LS_COLORS='di=34:ln=35:so=32:pi=33:ex=31:bd=46;34:cd=43;34:su=41;30:sg=46;30:tw=42;30:ow=43;30'
# 補完候補にも色付き表示
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
# kill の候補にも色付き表示
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([%0-9]#)*=0=01;31'

##========================================================##
##====================== 補完の設定 ======================##
##========================================================##
autoload -U compinit ; compinit
# 補完候補の大文字小文字の違いを無視
#zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'
zstyle ':completion:*:default' menu select=1 # 補完候補を←↓↑→で選択
zstyle ':completion:*' use-cache true        # 補完キャッシュ
# kill で 'ps x' のリストから選択可能
zstyle ':completion:*:processes' command 'ps x'

setopt list_packed           # コンパクトに補完リストを表示
#setopt auto_remove_slash     # 補完で末尾に補われた / を自動的に削除
unsetopt auto_remove_slash
setopt auto_param_slash      # ディレクトリ名の補完で末尾の / を自動的に付加し、次の補完に備える
setopt mark_dirs             # ファイル名の展開でディレクトリにマッチした場合 末尾に / を付加
setopt list_types            # 補完候補一覧でファイルの種別を識別マーク表示 (訳注:ls -F の記号)
unsetopt menu_complete       # 補完の際に、可能なリストを表示してビープを鳴らすのではなく、
                        # 最初にマッチしたものをいきなり挿入、はしない
setopt auto_list             # ^Iで補完可能な一覧を表示する(補完候補が複数ある時に、一覧表示)
setopt auto_menu             # 補完キー連打で順に補完候補を自動で補完
setopt auto_param_keys       # カッコの対応などを自動的に補完
setopt auto_resume           # サスペンド中のプロセスと同じコマンド名を実行した場合はリジューム

#setopt auto_correct          # 補完時にスペルチェック
#setopt correct               # スペルミスを補完
#setopt correct_all           # コマンドライン全てのスペルチェックをする

##========================================================##
##==================== 予測補完の設定 ====================##
##========================================================##
# NOTE: https://www.mizdra.net/entry/2024/10/19/172323
export FZF_DEFAULT_OPTS="--reverse --no-sort --no-hscroll --preview-window=down"
user_name=$(git config user.name)
fmt="\
%(if:equals=$user_name)%(authorname)%(then)%(color:default)%(else)%(color:brightred)%(end)%(refname:short)|\
%(committerdate:relative)|\
%(subject)"
function select-git-branch-friendly() {
  selected_branch=$(
    git branch --sort=-committerdate --format=$fmt --color=always \
    | column -ts'|' \
    | fzf --ansi --exact --preview='git log --oneline --graph --decorate --color=always -50 {+1}' \
    | awk '{print $1}' \
  )
  BUFFER="${LBUFFER}${selected_branch}${RBUFFER}"
  CURSOR=$#LBUFFER+$#selected_branch
  zle redisplay
}
zle -N select-git-branch-friendly
bindkey '^b' select-git-branch-friendly

##========================================================##
##====================== 履歴の設定 ======================##
##========================================================##
HISTFILE=$HOME/.zsh_history  # 履歴をファイルに保存する
HISTSIZE=1000000              # メモリ内の履歴の数
SAVEHIST=1000000              # 保存される履歴の数
setopt extended_history      # 履歴ファイルに開始時刻と経過時間を記録
setopt append_history        # 履歴を追加 (毎回 .zhistory を作るのではなく)
setopt inc_append_history    # 履歴をインクリメンタルに追加
setopt share_history         # 履歴の共有
setopt hist_ignore_all_dups  # 重複するコマンド行は古い方を削除
setopt hist_ignore_dups      # 直前と同じコマンドラインはヒストリに追加しない
setopt hist_ignore_space     # スペースで始まるコマンド行はヒストリリストから削除
                        # (→ 先頭にスペースを入れておけば、ヒストリに保存されない)
unsetopt hist_verify         # ヒストリを呼び出してから実行する間に一旦編集可能を止める
setopt hist_reduce_blanks    # 余分な空白は詰めて記録
setopt hist_save_no_dups     # ヒストリファイルに書き出すときに、古いコマンドと同じものは無視する。
setopt hist_no_store         # historyコマンドは履歴に登録しない
setopt hist_expand           # 補完時にヒストリを自動的に展開

# 全履歴の一覧を出力する
function history-all { history -E 1 }

##========================================================##
##=================== プロンプトの設定 ===================##
##========================================================##
# https://qiita.com/kumatira/items/41562f1d9001927e9888
autoload -U promptinit ; promptinit
autoload -U colors     ; colors
autoload -Uz vcs_info
setopt prompt_subst
# zstyle ':vcs_info:git:*' formats '%b'
zstyle ':vcs_info:git:*' formats '%F{black}%K{green}[%b]%f%k'
precmd () { vcs_info }
PROMPT='%B%50<..<%~ %b${vcs_info_msg_0_}'
PROMPT+='%(?.%(!.%F{white}❯%F{yellow}❯%F{red}.%F{blue}❯%F{cyan}❯%F{green})❯.%F{red}❯❯❯)%f '
##========================================================##
##================ ディレクトリ移動の設定 ================##
##========================================================##
setopt auto_cd               # ディレクトリのみで移動
setopt auto_pushd            # 普通に cd するときにもディレクトリスタックにそのディレクトリを入れる
setopt pushd_ignore_dups     # ディレクトリスタックに重複する物は古い方を削除
setopt pushd_to_home         # pushd 引数ナシ == pushd $HOME
setopt pushd_silent          # pushd,popdの度にディレクトリスタックの中身を表示しない

##========================================================##
##====================== 雑多な設定 ======================##
##========================================================##
#setopt AUTOLOGOUT=n          # n分後に自動的にログアウト
setopt no_beep               # コマンド入力エラーでBeepを鳴らさない

setopt complete_in_word
setopt extended_glob         # 拡張グロブを有効にする
setopt brace_ccl             # ブレース展開機能を有効にする
setopt equals                # =COMMAND を COMMAND のパス名に展開
setopt numeric_glob_sort     # 数字を数値と解釈してソートする
setopt path_dirs             # コマンド名に / が含まれているとき PATH 中のサブディレクトリを探す
setopt print_eight_bit       # 補完候補リストの日本語を適正表示
setopt auto_name_dirs

unsetopt flow_control        # (shell editor 内で) C-s, C-q を無効にする
setopt no_flow_control       # C-s/C-q によるフロー制御を使わない
setopt hash_cmds             # 各コマンドが実行されるときにパスをハッシュに入れる

#setopt ignore_eof            # C-dでログアウトしない

setopt bsd_echo
setopt no_hup                # ログアウト時にバックグラウンドジョブをkillしない
#setopt no_checkjobs          # ログアウト時にバックグラウンドジョブを確認しない
setopt notify                # バックグラウンドジョブが終了したら(プロンプトの表示を待たずに)すぐに知らせる
setopt long_list_jobs        # 内部コマンド jobs の出力をデフォルトで jobs -L にする

setopt magic_equal_subst     # コマンドラインの引数で --PREFIX=/USR などの = 以降でも補完できる
#setopt mail_warning
setopt multios               # 複数のリダイレクトやパイプなど、必要に応じて TEE や CAT の機能が使われる
setopt short_loops           # FOR, REPEAT, SELECT, IF, FUNCTION などで簡略文法が使えるようになる
#setopt sun_keyboard_hack     # SUNキーボードでの頻出 typo ` をカバーする
setopt always_last_prompt    # カーソル位置は保持したままファイル名一覧を順次その場で表示
setopt cdable_vars sh_word_split

setopt rm_star_wait          # rm * を実行する前に確認
#setopt rm_star_silent        # rm * を実行する前に確認しない
#setopt no_clobber            # リダイレクトで上書きを禁止
unsetopt no_clobber

# setopt no_unset              # 未定義変数の使用禁止

#setopt interactive_comments  # コマンド入力中のコメントを認める
#setopt chase_links           # シンボリックリンクはリンク先のパスに変換してから実行
#setopt print_exit_value      # 戻り値が 0 以外の場合終了コードを表示
#setopt single_line_zle       # デフォルトの複数行コマンドライン編集ではなく、１行編集モードになる
#setopt xtrace                # コマンドラインがどのように展開され実行されたかを表示する

# less の動作（man less 参照）
LESS=-M
export LESS

umask 022 # ファイルを作るとき、どんな属性で作るか（man umask 参照）
ulimit -s unlimited  # stack size 制限解除
ulimit -Sn 524288
limit coredumpsize 0 # core 抑制
# Grip などGlibアプリケーション出力での文字化け防止
export G_FILENAME_ENCODING=@locale

# google 検索
function google() {
  local str
  if [ $# != 0 ]; then # 引数が存在すれば
    for i in $*; do
      str="$str+$i"
    done
    str=`echo $str | sed 's/^\+//'` #先頭の「+」を削除
  fi
  open "http://www.google.co.jp/search?hl=ja&q=$str"
}
# wikipedia 検索
function wikipedia() { open "https://ja.wikipedia.org/w/index.php?search=$1" }

# テキスト検索
function find-grep () { find . -type f -print | xargs grep -n --binary-files=without-match $@ }

# 現在のgit branch名をクリップボードにコピー
function gb() {
  branch_name=$(git branch | grep \* | cut -d ' ' -f2)
  echo -n "$branch_name" | tr -d '\n' | pbcopy
  echo "ブランチ名 '$branch_name' をクリップボードにコピーしました"
}


# Global alias
alias be="bundle exec"
alias b="bundle exec"

alias ls='ls -G'
if [ `uname` = "Linux" ]; then
  alias ls='ls --color'
fi

alias ll='ls -l'
alias cl='clear'
alias less='less -R'

alias ks='ls'

alias gg='git grep -n'
alias gst='git status'
alias gd='git diff'
alias gl='git log'
alias tl='git log'
alias gch='git checkout'
alias g='git'
alias gv='git --version'
alias gp='git push'
alias gad='git add \.'
alias gc='git commit \-m'
alias gm='git pull origin master'

alias ggl='git log --graph --pretty=oneline --abbrev-commit --decorate --all'

alias rr='bundle exec rails routes'

alias sb='source ~/.bashrc'
alias sz='source ~/.zshrc'

alias v='nvim'
alias i='nvim'
alias iv='nvim'
alias vi='nvim'
alias bi='nvim'
alias vo='nvim'
alias ci='nvim'
alias c='nvim'
alias vb='nvim ~/.bashrc'
alias vz='nvim ~/.zshrc'
alias vbpro='nvim ~/.bash_profile'
alias vv='nvim ~/.config/nvim/init.vim'
alias vk='nvim ~/dotfiles/mac/karabiner.json'
alias nv='nvim'
alias n='nvim'

alias ssh='ssh -o ServerAliveInterval=60'

alias e='nvim'
alias h='history'
alias ha='history-all'
alias cd_dotfiles='cd ~/dotfiles'
alias cd_src='cd ~/src'

# HTMLファイルに張り付け用の、タブ、空白、< > の変換コマンド
alias htmlconv='sed -e "s/</\&lt;/g;s/>/\&gt;/g;s/\t/\&nbsp;\&nbsp;\&nbsp;\&nbsp;/g;s/\s/\&nbsp;/g" '

alias lint='pre-commit run --config ~/dotfiles/pre-commit-config.yml'

# http://qiita.com/yuku_t/items/e58cbecf13407446bd50
function _git_status() {
  if [ "$(git rev-parse --is-inside-work-tree 2> /dev/null)" = 'true' ]; then
    echo git statusb # git statusを実行したっぽくみせかける
    git status
  fi
  zle reset-prompt
}

function _git_diff() {
  if [ "$(git rev-parse --is-inside-work-tree 2> /dev/null)" = 'true' ]; then
    git diff
  fi
  zle reset-prompt
}

function _shell_ls() {
  echo ls
  ls
  zle reset-prompt
}

zle -N git_status _git_status  # _git_status関数をgit_status widgetとして登録
zle -N git_diff _git_diff
zle -N shell_ls _shell_ls
bindkey '^G^S' git_status
bindkey '^G^G' git_diff
bindkey '^L^S' shell_ls



# screen のセッション名にカレントディレクトリ名にしてくれる
# http://hitode909.hatenablog.com/entry/20090731/1249051564
function ss () {
  if [ -n "$1" ]; then
    name="$1"
  else
    name=`basename "$PWD"`
  fi
  screen -x $name || screen -r $name || screen -S $name
}

function puma_ps () {
  ROOT_SCREEN_PID=$(ps x | grep -E "S $(echo `basename "$PWD"`)$" | awk '{ print $1}')
  if [[ $ROOT_SCREEN_PID == '' ]]; then
    echo 'カレントディレクトリ名のscreenセッションが見つかりませんでした'
    exit 1
  else
    pstree -p $ROOT_SCREEN_PID | grep puma
  fi
}

#!/bin/sh
# github.comでコミットのURLを表示する関数です
# Usage: open $(commit_id_url)
# => open browser!!
function commit_id_url() {
  HOST_AND_PATH=$(git remote -v | grep origin | head -n 1 | tr ':' '/' | sed -e 's|.*@\(github.com/[^.]*\)\..*$|\1|')
  HEAD_COMMMIT_ID=$(git rev-parse HEAD)
  echo https://${HOST_AND_PATH}/commit/${HEAD_COMMMIT_ID}
}

function git_file_url() {
  HOST_AND_PATH=$(git remote -v | grep origin | head -n 1 | tr ':' '/' | sed -e 's|.*@\(github.com/[^.]*\)\..*$|\1|')
  HEAD_COMMMIT_ID=$(git rev-parse HEAD)
  echo https://${HOST_AND_PATH}/blob/$HEAD_COMMMIT_ID/$1
}

# test runner for rails
function rt() {
  local filename="$1"  # 引数（ファイル名）をローカル変数に格納
  if [ $# -gt 0 ]; then
    shift  # 最初の引数（ファイル名）をシフトして、残りの引数を取得
  fi

  local args="$@"  # 残りの引数を格納

  # 引数が与えられていない場合の処理
  if [ -z "$filename" ]; then
    if [ -d "test" ]; then
      echo "Running bundle exec rails test for all test files in the test directory"
      bundle exec rails test $args
    elif [ -d "spec" ]; then
      echo "Running bundle exec rspec for all spec files"
      bundle exec rspec $args
    else
      echo "No test or spec directory found in the current directory"
    fi
  elif [[ "$filename" =~ "_test.rb" ]]; then
    echo "Running bundle exec rails test for $filename"
    bundle exec rails test "$filename" $args
  elif [[ "$filename" =~ "_spec.rb" ]] || [[ "$filename" =~ "spec/" ]]; then
    echo "Running bundle exec rspec for $filename"
    bundle exec rspec "$filename" $args
  elif [[ "$filename" =~ ".feature" ]]; then
    echo "Running cucumber for $filename"
    bundle exec cucumber "$filename" $args
  else
    echo "Unknown file type: $filename"
  fi
}

function retry_command() {
  local max_retries=50
  local OPTIND opt

  while getopts ":n:" opt; do
    case $opt in
      n)
        max_retries=$OPTARG
        ;;
      \?)
        echo "無効なオプション: -$OPTARG" >&2
        return 1
        ;;
      :)
        echo "オプション -$OPTARG には値が必要です" >&2
        return 1
        ;;
    esac
  done
  shift $((OPTIND -1))

  local command="$@"
  for try in $(seq 1 $max_retries); do
    eval "$command" || break
    echo "試行回数: $try"
    sleep 1
  done

  if [ $try -eq $max_retries ]; then
    echo "最大試行回数に到達しましたが、コマンドは成功しませんでした"
  else
    echo "コマンドは試行回数 $try で成功しました"
  fi
}

function whichppr() {
  COMMIT_ID=$1
  if [[ $COMMIT_ID = '' ]]; then
    echo require commit id
    return 1
  fi

  (git show $COMMIT_ID > /dev/null 2>&1 )
  if [[ $? != 0 ]]; then
    echo not found commit id
    return 1
  fi
  PULL_REQUEST_ID=$(git log --merges --oneline --reverse --ancestry-path $COMMIT_ID...master | head -n1 | grep -o -E ' #[^ ]*' | grep -o -E '[0-9]*$')
  if [[ $PULL_REQUEST_ID = '' ]]; then
    echo not found PULL_REQUEST_ID
    return 1
  fi
  REPO_NAME=$(git remote -v | grep origin | head -n1 | grep -o ':[^.]*' | grep -o '[^:]*$')
  BASE=https://github.com
  open "$BASE/$REPO_NAME/pull/$PULL_REQUEST_ID"
}

ssh-add ~/.ssh/id_rsa > /dev/null 2>&1
