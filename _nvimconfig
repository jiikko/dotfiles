" sql pluginのマッピングが干渉するので無効にする
let g:omni_sql_no_default_maps = 1

set nobackup
set noswapfile

set wildignore+=.git,.svn
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg
set wildignore+=*.sw?
set wildignore+=.DS_Store
set wildignore+=node_modules,bower_components,elm-stuff

" set grepprg=git\ grep\ --no-index\ --exclude-standard\ -I\ --perl-regexp\ --line-number
set grepprg=git\ grep\ -I\ --line-number

syntax on
filetype off

command Q quit
command W write
command Wq wq
command WQ wq
command Vs vs
command VS vs
command Sp sp
command SP sp
command Tabe tabe
command TAbe tabe
command TABe tabe
command TABE tabe

nnoremap Q <Nop>

" Required:
set runtimepath+=~/.cache/dein/repos/github.com/Shougo/dein.vim

" Required:
call dein#begin('~/.cache/dein')

" Let dein manage dein
" Required:
call dein#add('~/.cache/dein/repos/github.com/Shougo/dein.vim')

call dein#add('scrooloose/nerdtree')
call dein#add('tpope/vim-rails')
call dein#add('lukelbd/vim-toggle')
call dein#add('motemen/git-vim')
call dein#add('tpope/vim-surround')
call dein#add('vim-jp/vimdoc-ja')
call dein#add('Shougo/vimproc.vim')
call dein#add('mattn/emmet-vim')
call dein#add('kana/vim-operator-user')
call dein#add('tyru/operator-camelize.vim')
call dein#add('xolox/vim-misc')
call dein#add('hashivim/vim-terraform')
call dein#add('fatih/vim-go')
call dein#add('tpope/vim-markdown')
call dein#add('noprompt/vim-yardoc', { "autoload" : { "filetypes" : [ "ruby" ] } })
call dein#add('nvim-lua/popup.nvim')
call dein#add('neoclide/coc.nvim', { 'merged':0, 'rev': 'release' })
call dein#add('RRethy/vim-illuminate')
call dein#add('andymass/vim-matchup')
call dein#add('windwp/nvim-ts-autotag')
call dein#add('nvim-treesitter/nvim-treesitter', { 'do': ':TSUpdate' })
call dein#add('tpope/vim-endwise')
call dein#add('folke/which-key.nvim')
call dein#add('itchyny/lightline.vim')
call dein#add('github/copilot.vim')
call dein#add('morhetz/gruvbox')
call dein#add('delphinus/vim-auto-cursorline')
call dein#add('nvim-telescope/telescope.nvim')
call dein#add('nvim-lua/plenary.nvim')
call dein#add('fannheyward/telescope-coc.nvim')
call dein#add('rbtnn/vim-ambiwidth')
call dein#add('romgrk/barbar.nvim')
call dein#add('nvim-tree/nvim-web-devicons')
call dein#add('tiagofumo/vim-nerdtree-syntax-highlight')
call dein#add('ryanoasis/vim-devicons')
call dein#add('lukas-reineke/indent-blankline.nvim')
call dein#add("rcarriga/nvim-notify")
call dein#add("numToStr/Comment.nvim")
call dein#add("CopilotC-Nvim/CopilotChat.nvim", { 'rev': 'canary' })
call dein#add("nvim-telescope/telescope-ui-select.nvim")


" Required:
call dein#end()

" Required:
syntax enable
filetype plugin indent on

" If you want to install not installed plugins on startup.
if dein#check_install()
  call dein#install()
endif

lua << EOF
  vim.notify = require("notify")
EOF


"----------------------------------------------------
" プラギンの設定
"----------------------------------------------------
let g:coc_global_extensions = [
      \'coc-actions',
      \'coc-sh',
      \'coc-cspell-dicts',
      \'coc-html',
      \'coc-css',
      \'coc-html-css-support',
      \'coc-docker',
      \'coc-diagnostic',
      \'coc-dictionary',
      \'coc-eslint',
      \'coc-git',
      \'coc-pyright',
      \'coc-highlight',
      \'coc-json',
      \'coc-markdownlint',
      \'coc-prettier',
      \'coc-spell-checker',
      \'coc-tslint-plugin',
      \'coc-tsserver',
      \'coc-yaml',
      \'coc-solargraph',
      \'coc-sh',
      \'coc-sql',
      \'coc-markdown-preview-enhanced',
      \'coc-webview',
\]
function! CocCurrentFunction()
    return get(b:, 'coc_current_function', '')
endfunction

let g:lightline = {
      \ 'colorscheme': 'wombat',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'cocstatus', 'currentfunction', 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'component_function': {
      \   'cocstatus': 'coc#status',
      \   'currentfunction': 'CocCurrentFunction'
      \ },
      \ }

let g:toggle_map = '+'
let g:toggle_words_on = [
  \ 'and', 'if', 'unless', 'elsif', 'it', 'specify', 'describe',
  \ 'true', 'yes', 'on', 'public', 'protected', '&&'
\]

let g:toggle_words_off = [
\ 'or', 'unless', 'if', 'else', 'specify', 'it', 'context',
\ 'false', 'no', 'off', 'protected', 'private', '||'
\]




"Diagnosticsの、左横のアイコンの色設定
highlight CocErrorSign ctermfg=15 ctermbg=196
highlight CocWarningSign ctermfg=0 ctermbg=172

" coc
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm() : "\<CR>"
nmap <silent> <space><space> :<C-u>CocList<cr>

" Tabキーを使って補完候補
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction

inoremap <silent><expr> <Tab>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<Tab>" :
      \ coc#refresh()

" vim-matchup
let g:loaded_matchit = 1

let g:terraform_align=1
"let g:terraform_fold_sections=1
let g:terraform_fmt_on_save=1

" typescript
" autocmd FileType typescript :set makeprg=tsc

autocmd BufRead,BufNewFile *.sql.erb set filetype=sql

" for vim-go
let g:go_null_module_warning = 0

"vim立ち上げたときに、自動的にvim-indent-guidesをオンにする
let g:indent_guides_enable_on_vim_startup=1
" ガイドをスタートするインデントの量
let g:indent_guides_start_level=2
" 自動カラーを無効にする
let g:indent_guides_auto_colors=0
" 奇数インデントのカラー
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=#262626 ctermbg=gray
" 偶数インデントのカラー
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=#3c3c3c ctermbg=darkgray
" ハイライト色の変化の幅
let g:indent_guides_color_change_percent = 30
" ガイドの幅
let g:indent_guides_guide_size = 1

" for nerdtree
nmap <silent> <C-e>      :NERDTreeToggle<CR>
vmap <silent> <C-e> <Esc>:NERDTreeToggle<CR>
omap <silent> <C-e>      :NERDTreeToggle<CR>
imap <silent> <C-e> <Esc>:NERDTreeToggle<CR>
cmap <silent> <C-e> <C-u>:NERDTreeToggle<CR>
 let g:NERDTreeIgnore=['\.clean$',  '\.swp$',  '\.bak$',  '\~$']
""let g:NERDTreeShowHidden=1
let g:NERDTreeMinimalUI=1
let g:NERDTreeDirArrows=0
let g:NERDTreeMouseMode=2

" hangupする
map <S-k> <Esc>

" emmet
let g:user_emmet_leader_key = '<c-g>'

" コードジャンプ
map <C-j> <Plug>(coc-definition)
map <C-k> <Plug>(coc-references)
nmap <C-g> :CocList symbols<CR>
nmap <C-h> :CocList outline<CR>

"----------------------------------------------------
" 基本設定(base basic)
"----------------------------------------------------
" バックスペースキーで削除できるものを指定
" indent  : 行頭の空白
" eol     : 改行
" start   : 挿入モード開始位置より手前の文
set backspace=indent,eol,start
set number
set history=10000
" show the cursor position all the time
set ruler
"コマンドを表示する
set showcmd
"検索ワードの最初の文字を入力した時点で検索が開始されます。
set incsearch
" ステータスラインを常に表示
set laststatus=2

" 検索結果文字列のハイライトを有効にする
set hlsearch

" ウィンドウの幅より長い行は折り返して、次の行に続けて表示する
set wrap

" tab
set expandtab "タブの代わりに空白文字挿入
set ts=2 sw=2 sts=0 "タブは半角4文字分のスペース

" スクロール時の余白確保
set scrolloff=5
" テキスト整形オプション，マルチバイト系を追加
set formatoptions=lmoq

 " 現在のモードを表示
set showmode

" モードラインは無効
" set modelines=0
" OSのクリップボードを使用する
set clipboard=unnamedplus

set smarttab
set smartindent

" showbreaks
set showbreak=↪

" 挿入モードでCtrl+kを押すとクリップボードの内容を貼り付けられるようにする "
" imap "*pa


" 改行
nnoremap ; :<C-u>call append(expand('.'), '')<CR>j

"左右
noremap <Right> <Cmd>BufferNext<CR>
noremap <Left> <Cmd>BufferPrevious<CR>
noremap gt <Cmd>BufferNext<CR>
noremap gT <Cmd>BufferPrevious<CR>


" 上下, bw でもいいけどバッファから消えてほしくない
" nnoremap <silent><Down>  :<C-u>bw<CR>
" nnoremap <silent><Down>  :<C-u>q<CR>
nnoremap <C-a><C-a> :BufferClose<CR>

" QuickFix
nnoremap <C-p> :cprevious<CR>   " 前へ
nnoremap <C-n> :cnext<CR>       " 次へ
" nnoremap <C-P> :<C-u>cfirst<CR> " 最初へ
" nnoremap <C-N> :<C-u>clast<CR>  " 最後へ

"ノーマルモードでクリップボードからペースト
" nnoremap <C-p> "+p

" emacs like
nnoremap <C-f> <Right>
nnoremap <C-b> <Left>
inoremap <C-f> <Right>
inoremap <C-b> <Left>

" silent ]
inoremap <C-]> <ESC>
nnoremap <C-]> <ESC>

" ========== 検索結果のハイライト&Escで消す
" ハイライトON
set hlsearch

" Esc Esc でハイライトOFF
nnoremap <Esc><Esc> :<C-u>set nohlsearch<Return>

" 「/」「?」「*」「#」が押されたらハイライトをON にしてから「/」「?」「*」「#」
nnoremap / :<C-u>set hlsearch<Return>/
nnoremap ? :<C-u>set hlsearch<Return>?
nnoremap * :<C-u>set hlsearch<Return>*
nnoremap # :<C-u>set hlsearch<Return>#

" for coding
nnoremap <leader>wtf oputs "#" * 90<c-m>puts caller<c-m>puts "#" * 90<esc>
nnoremap <leader>bi obinding.pry<esc>
nnoremap <leader>rw obegin; raise; rescue => e; File.write("/tmp/ruby_caller", e.backtrace.join("\n")) && raise; end<esc>
nnoremap <leader>rr :cfile /tmp/ruby_caller<CR>:cw<esc>
nnoremap <leader>re :e /tmp/ruby_caller<esc>
nnoremap <leader>ds :e db/schema.rb<esc>
nnoremap <leader>yr o@return []<esc>
nnoremap <leader>yp o@param []<esc>
" \rwで入力待ちを消す
nmap none <Plug>RestoreWinPosn

" 便利
nnoremap <leader>aa :enew<CR>
nnoremap <leader>lr :%s/ *$//g<CR>:noh<CR>
inoremap <C-y><C-w> <ESC>:w<CR>
nnoremap <C-y><C-w> :w<CR>
nnoremap <leader>sp :sp<CR>
nnoremap <leader>vs :vs<CR>

" NERDTREE, NERDTree
nnoremap <leader>nt :NERDTree<CR>
nnoremap <leader>nf :NERDTreeFind<CR>

" coc.nvim
set updatetime=300
set signcolumn=yes

" Add `:Format` command to format current buffer
command! -nargs=0 Format :call CocActionAsync('format')

" Add `:Fold` command to fold current buffer
command! -nargs=? Fold :call CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer
command! -nargs=0 OR   :call CocActionAsync('runCommand', 'editor.action.organizeImport')

" Highlight the symbol and its references when holding the cursor
autocmd CursorHold * silent call CocActionAsync('highlight')

set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}


"Yankした情報を他のアプリケーションでも利用
set clipboard=unnamed

" 現在のファイル名表示して、クリップボードにコピーする
nnoremap <leader>cf :let @+ = expand('%:~:.')<CR>:echo "\"" . expand('%:~:.') . "をコピーしました\""<CR>

xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

" ケースの変換
map <leader>c <Plug>(operator-camelize)
map <leader>C <Plug>(operator-decamelize)

" カーソルを合わせてTを押すとドキュメントを表示
function! s:show_documentation() abort
  if index(['vim','help'], &filetype) >= 0
    execute 'h ' . expand('<cword>')
  elseif coc#rpc#ready()
    call CocActionAsync('doHover')
  endif
endfunction
nnoremap <leader>t <Cmd>call <SID>show_documentation()<CR>


nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Do default action for next item
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>


" Use CTRL-S for selections ranges
" Requires 'textDocument/selectionRange' support of language server
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"

" Use <c-space> to trigger completion
" inoremap <expr> tt coc#refresh()


nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" カーソル位置で適用できるコードアクションを呼び出す
nmap <leader>ac  <Plug>(coc-codeaction-cursor)

" バッファ全体に影響するコードアクションを呼び出す
nmap <leader>as  <Plug>(coc-codeaction-source)

" 現在行に対する最適なクイックフィックスを適用する
nmap <leader>qf  <Plug>(coc-fix-current)


"----------------------------------------------------
" 表示
"----------------------------------------------------
" 全角スペースの表示
highlight ZenkakuSpace cterm=underline ctermfg=lightblue guibg=darkgray
match ZenkakuSpace /　/

" カレントウィンドウにのみ罫線を引く
augroup cch
  autocmd! cch
  autocmd WinLeave * set nocursorline
  autocmd WinEnter,BufRead * set cursorline
augroup END

" コメント文の色を変更
highlight Comment ctermfg=DarkCyan
" " コマンドライン補完を拡張モードにする
set wildmenu

" 括弧入力時の対応する括弧を表示
set showmatch

" タイトルをウインドウ枠に表示する
set title

" カーソル行をハイライト
set cursorline

" コマンド実行中は再描画しない
set lazyredraw

" 高速ターミナル接続を行う
set ttyfast


"----------------------------------------------------
" 編集 edit
"----------------------------------------------------
" ハイライト on
syntax enable


"----------------------------------------------------
" 編集 edit
"----------------------------------------------------

" コンマの後に自動的にスペースを挿入
" "inoremap , ,<Space>

" 保存時に行末の空白を除去する
" autocmd BufWritePre * :%s/\s\+$//ge

" cwindow を一緒に実行してくれる
autocmd QuickFixCmdPost *grep* cwindow

"----------------------------------------------------
" インデント
"----------------------------------------------------
"set noexpandtab

"----------------------------------------------------
" オートコマンド
"----------------------------------------------------
if has("autocmd")
  " カーソル位置を記憶する
  autocmd BufReadPost *
  \ if line("'\"") > 0 && line("'\"") <= line("$") |
  \   exe "normal g`\"" |
  \ endif
endif

"----------------------------------------------------
" 国際化関係
"----------------------------------------------------
" 文字コードの設定
" fileencodingsの設定ではencodingの値を一番最後に記述する
set termencoding=utf-8
set fileencodings=utf-8
set encoding=utf-8
set fileencoding=utf-8


"----------------------------------------------------
" その他
"----------------------------------------------------
" ビープ音を鳴らさない
set vb t_vb=

" コマンド補完を開始するキー
set wildchar=<tab>


" URLをひらくやつ
function! HandleURL()
  let s:uri = matchstr(getline("."), '[a-z]*:\/\/[^ >,;]*')
  echo s:uri
  if s:uri != ""
    silent exec "!open '".s:uri."'"
    :redraw!
  else
    echo "No URI found in line."
  endif
endfunction
nmap <silent> <leader>b <Esc>:call HandleURL()<CR>

" Format leader + f
nnoremap <leader>f :Format<CR>


" 折りたたみ
set foldmethod=indent
set foldlevel=100

lua << EOF
require('telescope').setup{
  defaults = {
    sorting_strategy = "ascending", -- 検索結果を上から下に並べる
    layout_strategy = 'vertical',
    layout_config = { height = 0.9 },
    file_ignore_patterns = { --検索対象に含めないファイルを指定
      "^.git/",
      "^node_modules/",
      "package-lock.json",
      "yarn.lock",
      "yarn-error.log",
    },
    border = true,
    prompt_prefix='🔍 ',
  },
  extensions = {
    coc = {
        theme = 'ivy',
        prefer_locations = true, -- always use Telescope locations to preview definitions/declarations/implementations etc
    },
    ["ui-select"] = {
      require("telescope.themes").get_dropdown {
      }
    },
  },
}
require('telescope').load_extension('coc')
require('telescope').load_extension('ui-select')

require'barbar'.setup {
  auto_hide = false,
}
require("ibl").setup()
require('Comment').setup()

require("CopilotChat").setup {
  debug = true,
  show_user_selection = true, -- Shows user selection in chat
  show_system_prompt = false, -- Shows system prompt in chat
  show_folds = true, -- Shows folds for sections in chat
  clear_chat_on_new_prompt = false, -- Clears chat on every new prompt
  auto_follow_cursor = true, -- Auto-follow cursor in chat
  name = 'CopilotChat', -- Name to use in chat
  separator = '---', -- Separator to use in chat
  prompts = {
    Explain = {
      prompt = '動作原理を説明してください。',
    },
    Tests = {
      prompt = '選択されたコードの動作を簡潔に説明して、その後ユニットテストを生成してください。',
    },
    Commit = {
      prompt = 'Commitizen規約に従って日本語で変更のコミットメッセージを書いてください。タイトルは最大50文字、メッセージは72文字で折り返してください。全メッセージをgitcommit言語でコードブロックに包んでください。',
    },
    CommitStaged = {
      prompt = 'Commitizen規約に従って日本語で変更のコミットメッセージを書いてください。タイトルは最大50文字、メッセージは72文字で折り返してください。全メッセージをgitcommit言語でコードブロックに包んでください。',
    },
  },
  window = {
    layout = 'float',
    relative = 'cursor',
    width = 1,
    height = 0.4,
    row
  },
  mappings = {
    close = 'q',
    reset = '<C-l>',
    complete_after_slash = '<Tab>',
    submit_prompt = '<CR>',
    accept_diff = '<C-y><C-y>',
    show_diff = '<C-d><C-d>',
  },

  -- selection = function(source)
  --  return vim.ui.select(source)
  -- end,
}

EOF

let g:webdevicons_enable_nerdtree = 1

nnoremap <leader>ff <cmd>Telescope find_files<cr>
nnoremap <leader>fg <cmd>Telescope live_grep<cr>
nnoremap <leader>fb <cmd>Telescope buffers<cr>

colorscheme gruvbox
