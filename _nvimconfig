set re=1
set background=light

set ambiwidth=double
set nobackup
set noswapfile

set wildignore+=.git,.svn
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg
set wildignore+=*.sw?
set wildignore+=.DS_Store
set wildignore+=node_modules,bower_components,elm-stuff

" set grepprg=jvgrep
" set grepprg=git\ grep\ --no-index\ --exclude-standard\ -I\ --perl-regexp\ --line-number
set grepprg=git\ grep\ -I\ --line-number

" Viとの互換断ち
set nocompatible
syntax on
filetype off

command Q quit
command W write
command Wq wq
command WQ wq
command Vs vs
command VS vs
command Sp sp
command SP sp
command Tabe tabe
command TAbe tabe
command TABe tabe
command TABE tabe

nnoremap Q <Nop>

" Required:
set runtimepath+=~/.cache/dein/repos/github.com/Shougo/dein.vim

" Required:
call dein#begin('~/.cache/dein')

" Let dein manage dein
" Required:
call dein#add('~/.cache/dein/repos/github.com/Shougo/dein.vim')

" Add or remove your plugins here like this:
call dein#add('scrooloose/nerdtree')
call dein#add('tpope/vim-rails')
call dein#add('taku-o/vim-toggle')
call dein#add('motemen/git-vim')
call dein#add('tpope/vim-surround')
call dein#add('vim-jp/vimdoc-ja')
call dein#add('kchmck/vim-coffee-script')
call dein#add('Shougo/vimproc.vim')
call dein#add('mattn/emmet-vim')
call dein#add('slim-template/vim-slim')
call dein#add('kana/vim-operator-user')
call dein#add('tyru/operator-camelize.vim')
call dein#add('vim-ruby/vim-ruby')
call dein#add('xolox/vim-misc')
call dein#add('othree/yajs.vim')
call dein#add('hashivim/vim-terraform')
call dein#add('fatih/vim-go')
call dein#add('pangloss/vim-javascript')
call dein#add('moll/vim-node')
call dein#add('maxmellon/vim-jsx-pretty')
call dein#add('leafgarland/typescript-vim')
call dein#add('peitalin/vim-jsx-typescript')
call dein#add('tpope/vim-markdown')
call dein#add('kamykn/spelunker.vim', { "autoload" : { "filetypes" : [ "ruby" ] } })
call dein#add('noprompt/vim-yardoc', { "autoload" : { "filetypes" : [ "ruby" ] } })
call dein#add('nvim-lua/popup.nvim')
call dein#add('neoclide/coc.nvim', { 'merged':0, 'rev': 'release' })
call dein#add('RRethy/vim-illuminate')
call dein#add('andymass/vim-matchup')
" call dein#add('windwp/nvim-autopairs')
call dein#add('windwp/nvim-ts-autotag')
call dein#add('nvim-treesitter/nvim-treesitter', { 'do': ':TSUpdate' })
call dein#add('tpope/vim-endwise')
call dein#add('folke/which-key.nvim')
call dein#add('itchyny/lightline.vim')
call dein#add('jlcrochet/vim-rbs')
call dein#add('tpope/vim-abolish')
call dein#add('github/copilot.vim')
call dein#add('morhetz/gruvbox')


" Required:
call dein#end()

" Required:
syntax enable
filetype plugin indent on

" If you want to install not installed plugins on startup.
if dein#check_install()
  call dein#install()
endif


"----------------------------------------------------
" プラギンの設定
"----------------------------------------------------
let g:coc_global_extensions = [
      \'coc-actions',
      \'coc-cspell-dicts',
      \'coc-diagnostic',
      \'coc-dictionary',
      \'coc-eslint',
      \'coc-git',
      \'coc-highlight',
      \'coc-json',
      \'coc-lists',
      \'coc-markdownlint',
      \'coc-prettier',
      \'coc-spell-checker',
      \'coc-tslint-plugin',
      \'coc-tsserver',
      \'coc-yaml',
      \'coc-sql',
\]
let g:lightline = {
  \'active': {
    \'right': [
      \['coc']
    \]
  \},
  \'component_function': {
    \'coc': 'coc#status'
  \}
\}
"Diagnosticsの、左横のアイコンの色設定
highlight CocErrorSign ctermfg=15 ctermbg=196
highlight CocWarningSign ctermfg=0 ctermbg=172

" coc
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm() : "\<CR>"
nmap <silent> <space><space> :<C-u>CocList<cr>

" Tabキーを使って補完候補
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction

inoremap <silent><expr> <Tab>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<Tab>" :
      \ coc#refresh()

" vim-matchup
let g:loaded_matchit = 1

let g:tabman_width = 50
let g:tabman_toggle = '<leader>mt'
let g:tabman_focus  = '<leader>mf'

let g:terraform_align=1
"let g:terraform_fold_sections=1
let g:terraform_fmt_on_save=1

" typescript
" autocmd FileType typescript :set makeprg=tsc

" for vim-go
let g:go_null_module_warning = 0

"vim立ち上げたときに、自動的にvim-indent-guidesをオンにする
let g:indent_guides_enable_on_vim_startup=1
" ガイドをスタートするインデントの量
let g:indent_guides_start_level=2
" 自動カラーを無効にする
let g:indent_guides_auto_colors=0
" 奇数インデントのカラー
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=#262626 ctermbg=gray
" 偶数インデントのカラー
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=#3c3c3c ctermbg=darkgray
" ハイライト色の変化の幅
let g:indent_guides_color_change_percent = 30
" ガイドの幅
let g:indent_guides_guide_size = 1

" for nerdtree
" Vim起動時にNerdTreeが起動するようにする
" autocmd vimenter * if !argc() | NERDTree | endif
" autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
nmap <silent> <C-e>      :NERDTreeToggle<CR>
vmap <silent> <C-e> <Esc>:NERDTreeToggle<CR>
omap <silent> <C-e>      :NERDTreeToggle<CR>
imap <silent> <C-e> <Esc>:NERDTreeToggle<CR>
cmap <silent> <C-e> <C-u>:NERDTreeToggle<CR>
 let g:NERDTreeIgnore=['\.clean$',  '\.swp$',  '\.bak$',  '\~$']
""let g:NERDTreeShowHidden=1
let g:NERDTreeMinimalUI=1
let g:NERDTreeDirArrows=0
let g:NERDTreeMouseMode=2

" js
" Setup used libraries
let g:used_javascript_libs = 'jquery,underscore,react,flux,jasmine,d3'
let b:javascript_lib_use_jquery = 1
let b:javascript_lib_use_underscore = 1
let b:javascript_lib_use_react = 1
let b:javascript_lib_use_flux = 1
let b:javascript_lib_use_jasmine = 1
let b:javascript_lib_use_d3 = 1

" hangupする
map <S-k> <Esc>

" emmet
let g:user_emmet_leader_key = '<c-g>'

" コードジャンプ
map <C-j> <Plug>(coc-definition)
map <C-k> <Plug>(coc-references)
nmap <C-g> :CocList symbols<CR>
nmap <C-h> :CocList outline<CR>

"----------------------------------------------------
" 基本設定(base basic)
"----------------------------------------------------
" バックスペースキーで削除できるものを指定
" indent  : 行頭の空白
" eol     : 改行
" start   : 挿入モード開始位置より手前の文
set backspace=indent,eol,start
set number
set history=10000
" show the cursor position all the time
set ruler
"コマンドを表示する
set showcmd
"検索ワードの最初の文字を入力した時点で検索が開始されます。
set incsearch
" ステータスラインを常に表示
set laststatus=2

" 検索結果文字列のハイライトを有効にする
set hlsearch

" ウィンドウの幅より長い行は折り返して、次の行に続けて表示する
set wrap

" tab
set expandtab "タブの代わりに空白文字挿入
set ts=2 sw=2 sts=0 "タブは半角4文字分のスペース

" スクロール時の余白確保
set scrolloff=5
" テキスト整形オプション，マルチバイト系を追加
set formatoptions=lmoq

 " 現在のモードを表示
set showmode

" モードラインは無効
" set modelines=0
" OSのクリップボードを使用する
set clipboard=unnamedplus

" ターミナルでマウスを使用できるようにする
" set mouse=a
set guioptions+=a
" set ttymouse=xterm2

set smarttab
set smartindent

" showbreaks
set showbreak=↪

" 挿入モードでCtrl+kを押すとクリップボードの内容を貼り付けられるようにする "
" imap "*pa


" 改行
nnoremap ; :<C-u>call append(expand('.'), '')<CR>j

"左右
noremap <Right> gt
noremap <Left> gT

" 上下, bw でもいいけどバッファから消えてほしくない
" nnoremap <silent><Down>  :<C-u>bw<CR>
" nnoremap <silent><Down>  :<C-u>q<CR>
nnoremap <C-a><C-a> :<C-u>q<CR>
nnoremap <silent><Up>    :<C-u>UniteWithBufferDir -buffer-name=files buffer file_mru bookmark file<CR>

" QuickFix
nnoremap <C-p> :cprevious<CR>   " 前へ
nnoremap <C-n> :cnext<CR>       " 次へ
" nnoremap <C-P> :<C-u>cfirst<CR> " 最初へ
" nnoremap <C-N> :<C-u>clast<CR>  " 最後へ

"ノーマルモードでクリップボードからペースト
" nnoremap <C-p> "+p

" emacs like
nnoremap <C-f> <Right>
nnoremap <C-b> <Left>
inoremap <C-f> <Right>
inoremap <C-b> <Left>

" silent ]
inoremap <C-]> <ESC>
nnoremap <C-]> <ESC>

" ========== 検索結果のハイライト&Escで消す
" ハイライトON
set hlsearch

" Esc Esc でハイライトOFF
nnoremap <Esc><Esc> :<C-u>set nohlsearch<Return>

" 「/」「?」「*」「#」が押されたらハイライトをON にしてから「/」「?」「*」「#」
nnoremap / :<C-u>set hlsearch<Return>/
nnoremap ? :<C-u>set hlsearch<Return>?
nnoremap * :<C-u>set hlsearch<Return>*
nnoremap # :<C-u>set hlsearch<Return>#

" for coding
nnoremap <leader>wtf oputs "#" * 90<c-m>puts caller<c-m>puts "#" * 90<esc>
nnoremap <leader>bi obinding.pry<esc>
nnoremap <leader>rw obegin; raise; rescue => e; File.write("/tmp/ruby_caller", e.backtrace.join("\n")) && raise; end<esc>
nnoremap <leader>rr :cfile /tmp/ruby_caller<CR>:cw<esc>
nnoremap <leader>re :e /tmp/ruby_caller<esc>
nnoremap <leader>ds :e db/schema.rb<esc>
nnoremap <leader>yr o@return []<esc>
nnoremap <leader>yp o@param []<esc>
" \rwで入力待ちを消す
nmap none <Plug>RestoreWinPosn

" 便利
nnoremap <C-n><C-m> :TMToggle<CR>
nnoremap <leader>aa :tabedit<CR>
nnoremap <leader>lr :%s/ *$//g<CR>:noh<CR>
inoremap <C-y><C-w> <ESC>:w<CR>

nnoremap <C-y><C-w> :w<CR>
nnoremap <leader>sp :sp<CR>
nnoremap <leader>vs :vs<CR>


" NERDTREE, NERDTree
nnoremap <leader>nt :NERDTree<CR>
nnoremap <leader>nf :NERDTreeFind<CR>


"Yankした情報を他のアプリケーションでも利用
set clipboard=unnamed

" 現在のファイル名表示して、クリップボードにコピーする
nnoremap <leader>cf :let @+ = expand('%:~:.')<CR>:echo "\"" . expand('%:~:.') . "をコピーしました\""<CR>

xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

" ケースの変換
map <leader>c <Plug>(operator-camelize)
map <leader>C <Plug>(operator-decamelize)

" カーソルを合わせてTを押すとドキュメントを表示
function! s:show_documentation() abort
  if index(['vim','help'], &filetype) >= 0
    execute 'h ' . expand('<cword>')
  elseif coc#rpc#ready()
    call CocActionAsync('doHover')
  endif
endfunction
nnoremap <leader>t <Cmd>call <SID>show_documentation()<CR>

"----------------------------------------------------
" 表示
"----------------------------------------------------
" 全角スペースの表示
highlight ZenkakuSpace cterm=underline ctermfg=lightblue guibg=darkgray
match ZenkakuSpace /　/

" カレントウィンドウにのみ罫線を引く
augroup cch
  autocmd! cch
  autocmd WinLeave * set nocursorline
  autocmd WinEnter,BufRead * set cursorline
augroup END

" コメント文の色を変更
highlight Comment ctermfg=DarkCyan
" " コマンドライン補完を拡張モードにする
set wildmenu

" 括弧入力時の対応する括弧を表示
set showmatch

" タイトルをウインドウ枠に表示する
set title

" カーソル行をハイライト
set cursorline

" コマンド実行中は再描画しない
set lazyredraw

" 高速ターミナル接続を行う
set ttyfast


"----------------------------------------------------
" 編集 edit
"----------------------------------------------------
" ターミナルタイプによるカラー設定
if &term =~ "xterm-debian" || &term =~ "xterm-xfree86" || &term =~ "xterm-256color"
  set t_Co=16
  set t_Sf=^[[3%dm
  set t_Sb=^[[4%dm
elseif &term =~ "xterm-color"
  set t_Co=8
  set t_Sf=^[[3%dm
  set t_Sb=^[[4%dm
endif

" ハイライト on
syntax enable


"----------------------------------------------------
" 編集 edit
"----------------------------------------------------

" コンマの後に自動的にスペースを挿入
" "inoremap , ,<Space>

" 保存時に行末の空白を除去する
" autocmd BufWritePre * :%s/\s\+$//ge

" cwindow を一緒に実行してくれる
autocmd QuickFixCmdPost *grep* cwindow

"----------------------------------------------------
" インデント
"----------------------------------------------------
"set noexpandtab

"----------------------------------------------------
" オートコマンド
"----------------------------------------------------
if has("autocmd")
  " カーソル位置を記憶する
  autocmd BufReadPost *
  \ if line("'\"") > 0 && line("'\"") <= line("$") |
  \   exe "normal g`\"" |
  \ endif
endif

"CTRL-nでシンタックスチェック eで実行
" autocmd FileType ruby :map <C-n> <ESC>:!ruby -cW %<CR>
" autocmd FileType ruby :map <C-e> <ESC>:!ruby %<CR>


"----------------------------------------------------
" 国際化関係
"----------------------------------------------------
" 文字コードの設定
" fileencodingsの設定ではencodingの値を一番最後に記述する
set termencoding=utf-8
set fileencodings=utf-8
set encoding=utf-8
set fileencoding=utf-8


"----------------------------------------------------
" その他
"----------------------------------------------------
" ビープ音を鳴らさない
set vb t_vb=

" コマンド補完を開始するキー
set wildchar=<tab>


" URLをひらくやつ
function! HandleURL()
  let s:uri = matchstr(getline("."), '[a-z]*:\/\/[^ >,;]*')
  echo s:uri
  if s:uri != ""
    silent exec "!open '".s:uri."'"
    :redraw!
  else
    echo "No URI found in line."
  endif
endfunction
nmap <silent> <Leader>b <Esc>:call HandleURL()<CR>


" 折りたたみ
set foldmethod=indent
set foldlevel=100

" .ctagsファイルを自動で読み込む
set tags+=./.ctags

" gfコマンドでrubyのrequireしたファイルを開く
"set path+=**
" au FileType ruby nnoremap gf <C-w>gf

" Highlight entire word including special characters like !, ?
set iskeyword+=33
set iskeyword+=63


" colorscheme default
colorscheme gruvbox
set background=dark
let g:ligthline = { 'colorscheme': 'gruvbox' }
set t_Co=256


set updatetime=300

set signcolumn=yes
